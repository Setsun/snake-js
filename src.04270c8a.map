{"version":3,"sources":["utils/constants.js","Snake/index.js","GameEngine/index.js","index.js"],"names":["ActionTypes","LEFT","RIGHT","UP","DOWN","Snake","startPosition","body","currentAction","push","lastTail","action","head","nextHead","y","x","unshift","pop","generateApple","position","CELL_TYPES","APPLE","SNAKE","EMPTY","GameEngine","size","rootEl","onStart","onStop","initializeState","snake","Math","floor","apple","random","grid","Array","fill","gridEl","createGridEl","innerHTML","appendChild","initializeKeyboardEvents","eventListener","document","addEventListener","event","setCurrentAction","key","createElement","classList","add","row","rowEl","cellEl","updateGridEl","currentAppleCell","querySelector","currentSnakeCells","querySelectorAll","snakeCell","remove","childNodes","appleCell","isOutOfBounds","hasEatenApple","render","move","stop","addBodyCell","setTimeout","renderFrameId","window","requestAnimationFrame","removeEventListener","cancelAnimationFrame","start","getElementById","startMenuEl","loseMenuEl","startBtn","restartBtn","engine"],"mappings":"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","file":"src.04270c8a.map","sourceRoot":"../src","sourcesContent":["// @flow\n\nexport const ActionTypes = {\n  LEFT: 'ArrowLeft',\n  RIGHT: 'ArrowRight',\n  UP: 'ArrowUp',\n  DOWN: 'ArrowDown',\n};\n","// @flow\n\nimport { ActionTypes } from '../utils/constants';\nimport type { ActionType, Position } from '../types';\n\nclass Snake {\n  body: Array<Position>;\n  lastTail: Position;\n  currentAction: ActionType;\n\n  constructor(startPosition: Position) {\n    this.body = [startPosition];\n    this.currentAction = ActionTypes.UP;\n  }\n\n  addBodyCell() {\n    this.body.push(this.lastTail);\n  }\n\n  setCurrentAction(action: ActionType) {\n    this.currentAction = action;\n  }\n\n  move() {\n    const [ head ] = this.body;\n    let nextHead = { ...head };\n\n    switch (this.currentAction) {\n      case ActionTypes.LEFT: {\n        nextHead.y -= 1;\n        break;\n      }\n      case ActionTypes.RIGHT: {\n        nextHead.y += 1;\n        break;\n      }\n      case ActionTypes.UP: {\n        nextHead.x -= 1;\n        break;\n      }\n      case ActionTypes.DOWN: {\n        nextHead.x += 1;\n        break;\n      }\n    }\n\n    this.body.unshift(nextHead);\n    this.lastTail = this.body.pop();\n  }\n}\n\nexport default Snake;\n","// @flow\n\nimport Snake from '../Snake';\nimport type { ActionType, Position } from '../types';\n\nconst generateApple = (position: Position): Position => {\n  return position;\n};\n\nconst CELL_TYPES = {\n  APPLE: 'apple',\n  SNAKE: 'snake',\n  EMPTY: 'empty',\n};\n\ntype CellType = 'apple' | 'snake' | 'empty';\n\nclass GameEngine {\n  size: number;\n  snake: Object;\n  apple: Position;\n  grid: Array<Array<CellType>>;\n  gridEl: Node;\n  rootEl: Node;\n  eventListener: EventListener;\n  renderFrameId: number;\n  onStart: Function;\n  onStop: Function;\n\n  constructor(size: number, rootEl: HTMLElement, onStart: Function, onStop: Function) {\n    this.size = size;\n    this.rootEl = rootEl;\n    this.onStart = onStart;\n    this.onStop = onStop;\n  }\n\n  initializeState = () => {\n    // start snake in middle of grid\n    this.snake = new Snake({\n      x: Math.floor(this.size / 2),\n      y: Math.floor(this.size / 2),\n    });\n\n    // randomly place apple on the grid\n    this.apple = generateApple({\n      x: Math.floor(Math.random() * this.size),\n      y: Math.floor(Math.random() * this.size),\n    });\n\n    // initialize grid with empty cells\n    this.grid = new Array(this.size).fill(\n      new Array(this.size).fill(CELL_TYPES.EMPTY),\n    );\n\n    this.gridEl = this.createGridEl();\n\n    this.rootEl.innerHTML = '';\n    this.rootEl.appendChild(this.gridEl);\n  }\n\n  initializeKeyboardEvents = () => {\n    this.eventListener = document.addEventListener('keydown', (event: Event) => {\n      this.snake.setCurrentAction(event.key);\n    });\n  }\n\n  createGridEl = () => {\n    const gridEl = document.createElement('div');\n    gridEl.classList.add('grid');\n\n    for (let row of this.grid) {\n      let rowEl = document.createElement('div');\n      rowEl.classList.add('row');\n\n      for (let position of row) {\n        let cellEl = document.createElement('div');\n        cellEl.classList.add('cell');\n        rowEl.appendChild(cellEl);\n      }\n\n      gridEl.appendChild(rowEl);\n    }\n\n    return gridEl;\n  }\n\n  updateGridEl = () => {\n    const currentAppleCell = document.querySelector('.apple');\n    const currentSnakeCells = document.querySelectorAll('.cell.snake');\n\n    // clear old state of the current board\n    for (let snakeCell of currentSnakeCells) {\n      snakeCell.classList.remove('snake');\n    }\n    currentAppleCell && currentAppleCell.classList.remove('apple');\n\n    // update board with new state\n    for (let position of this.snake.body) {\n      const snakeCell = this.gridEl\n        .childNodes[position.x]\n        .childNodes[position.y];\n      snakeCell && snakeCell.classList.add('snake');\n    }\n    const appleCell = this.gridEl\n      .childNodes[this.apple.x]\n      .childNodes[this.apple.y];\n    appleCell && appleCell.classList.add('apple');\n  }\n\n  isOutOfBounds = (head: Position) => {\n    return (head.x < 0 || head.x > this.size - 1 || head.y < 0 || head.y > this.size - 1);\n  }\n\n  hasEatenApple = (head: Position) => {\n    return (head.x === this.apple.x && head.y === this.apple.y);\n  }\n\n  render = () => {\n    this.snake.move();\n\n    const [ head ] = this.snake.body;\n\n    if (this.isOutOfBounds(head)) {\n      this.stop();\n      this.onStop();\n      return;\n    }\n\n    if (this.hasEatenApple(head)) {\n      this.apple = generateApple({\n        x: Math.floor(Math.random() * this.size),\n        y: Math.floor(Math.random() * this.size),\n      });\n      this.snake.addBodyCell();\n    }\n\n    this.updateGridEl();\n\n    setTimeout(() => {\n      this.renderFrameId = window.requestAnimationFrame(this.render)\n    }, 1000 / 30);\n  }\n\n  stop = () => {\n    // clean up event listener and render loop\n    document.removeEventListener('keydown', this.eventListener);\n    window.cancelAnimationFrame(this.renderFrameId);\n  }\n\n  start = () => {\n    this.onStart();\n    this.initializeState();\n    this.initializeKeyboardEvents();\n    this.renderFrameId = window.requestAnimationFrame(this.render);\n  }\n}\n\nexport default GameEngine;\n","// @flow\n\nimport GameEngine from './GameEngine';\n\nconst rootEl = document.getElementById('root');\nconst startMenuEl = document.querySelector('.start-menu');\nconst loseMenuEl = document.querySelector('.lose-menu');\nconst startBtn = document.querySelector('.start-btn');\nconst restartBtn = document.querySelector('.restart-btn');\n\nconst onStart = () => {\n  startMenuEl.classList.add('hide');\n  loseMenuEl.classList.add('hide');\n}\nconst onStop = () => {\n  loseMenuEl.classList.remove('hide');\n};\n\nconst engine = new GameEngine(32, rootEl, onStart, onStop);\n\nstartBtn && startBtn.addEventListener('click', () => {\n  engine.start();\n});\n\nrestartBtn && restartBtn.addEventListener('click', () => {\n  engine.start();\n});\n"]}